{"version":3,"file":"static/js/368.d0cf754b.chunk.js","mappings":"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","sources":["components/AuthForm/SignUpAuthForm.jsx","components/pages/SignupPage/SignupPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { registerSchema } from './validation';\nimport { ReactComponent as Eye } from 'images/eye.svg';\nimport { ReactComponent as EyeSlash } from 'images/eye-slash.svg';\nimport css from './AuthForm.module.css';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { registeration } from 'store/auth/authOperations';\n\nconst SignUpAuthForm = () => {\n  const [flagWatch, setFlagWatch] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    reset,\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n\n  const onSubmit = data => {\n    if (data.password !== data.passwordRepeat) {\n      Notify.failure('Паролі не співпадають');\n      return;\n    }\n\n    dispatch(\n      registeration({\n        email: data.email,\n        password: data.password,\n      })\n    )\n      .unwrap()\n      .then(() => {\n        Notify.success('Registered successfully!');\n        reset();\n        navigate('/signin');\n      })\n      .catch(err => {\n        Notify.failure('Такий email вже використовується');\n      });\n  };\n\n  return (\n    <form\n      action=\"register\"\n      autoComplete=\"on\"\n      className={css.form}\n      onSubmit={handleSubmit(onSubmit)}\n    >\n      <h1 className={css.title}>Sign Up</h1>\n      <label htmlFor=\"email\" className={css.description}>\n        Enter your email\n      </label>\n      <input\n        id=\"email\"\n        className={errors?.email ? css.input + ' ' + css.inputError : css.input}\n        placeholder=\"E-mail...\"\n        {...register('email')}\n      />\n      <div className={css.error}>\n        {errors?.email && <p>{errors?.email.message || 'Errors!'}</p>}\n      </div>\n\n      <label htmlFor=\"password\" className={css.description}>\n        Enter your password\n      </label>\n      <div className={css.svg_input_password}>\n        {flagWatch ? (\n          <span\n            className={css.icon}\n            onClick={() => {\n              setFlagWatch(!flagWatch);\n            }}\n          >\n            <Eye />\n          </span>\n        ) : (\n          <span\n            onClick={() => {\n              setFlagWatch(!flagWatch);\n            }}\n            className={css.icon}\n          >\n            <EyeSlash />\n          </span>\n        )}\n        <input\n          id=\"password\"\n          className={\n            errors?.password ? css.input + ' ' + css.inputError : css.input\n          }\n          placeholder=\"Password\"\n          type={flagWatch ? 'text' : 'password'}\n          {...register('password')}\n        />\n      </div>\n      <div className={css.error}>\n        {errors?.password && <p>{errors?.password.message || 'Errors!'}</p>}\n      </div>\n\n      <label htmlFor=\"password\" className={css.description}>\n        Repeat password\n      </label>\n      <div className={css.svg_input_password}>\n        {flagWatch ? (\n          <span\n            className={css.icon}\n            onClick={() => {\n              setFlagWatch(!flagWatch);\n            }}\n          >\n            <Eye />\n          </span>\n        ) : (\n          <span\n            onClick={() => {\n              setFlagWatch(!flagWatch);\n            }}\n            className={css.icon}\n          >\n            <EyeSlash />\n          </span>\n        )}\n        <input\n          id=\"password1\"\n          className={\n            errors?.password ? css.input + ' ' + css.inputError : css.input\n          }\n          placeholder=\"Repeat password\"\n          type={flagWatch ? 'text' : 'password'}\n          {...register('passwordRepeat')}\n        />\n      </div>\n      <div className={css.error}>\n        {errors?.password && <p>{errors?.password.message || 'Errors!'}</p>}\n      </div>\n\n      <button type=\"submit\" className={css.button}>\n        Sign Up\n      </button>\n\n      <Link className={css.sign} to=\"/signin\">\n        Sign In\n      </Link>\n    </form>\n  );\n};\n\nexport default SignUpAuthForm;\n\n// <form className={css.form} onSubmit={handleSubmit} autoComplete=\"on\">\n//     <h1 className={css.title}>Sign In</h1>\n//     <p className={css.description}>Enter your email</p>\n// <label>\n//   <input placeholder='E-mail' className={css.input} type=\"email\" name=\"email\" onChange={handleChange} value={logEmail}/>\n//     </label>\n//               <p className={css.description}>Enter your password</p>\n//           <label className={css.form_label}>\n//             <input placeholder='Password' className={css.input}  type={flagWatch ? 'text' : 'password'} name=\"password\" onChange={handleChange} value={logPassword} />\n//             <div\n//               onClick={() => {\n//                 setFlagWatch(!flagWatch);\n//               }}\n//               className={css.svg_input_password}\n//             >\n//               {flagWatch ? <Eye /> : <EyeSlash />}\n//             </div>\n//           </label>\n//           <button className={css.button} type=\"submit\">\n//             Sign In\n//               </button>\n//               <p className={css.sign}>\n//           <Link to=\"/signup\">Sign Up</Link>\n//         </p>\n//         </form>\n","import css from '../SigninPage/SigninPage.module.css';\nimport SignUpAuthForm from 'components/AuthForm/SignUpAuthForm';\n\nconst SignupPage = () => {\n \n  return (\n    <section className=\"signMain\">\n      <div className=\"signSection\">\n        <div className=\"container\">\n          <div className={css.contPosition}>\n            <SignUpAuthForm/>\n          </div>\n        </div>\n      </div>\n    </section>\n    \n  );\n};\n\nexport default SignupPage;\n\n\n"],"names":["_useState","useState","_useState2","_slicedToArray","flagWatch","setFlagWatch","dispatch","useDispatch","navigate","useNavigate","_useForm","useForm","resolver","yupResolver","registerSchema","register","errors","formState","handleSubmit","reset","_jsxs","action","autoComplete","className","css","onSubmit","data","password","passwordRepeat","registeration","email","unwrap","then","Notify","catch","err","children","_jsx","htmlFor","_objectSpread","id","placeholder","message","onClick","Eye","EyeSlash","type","Link","to","SignUpAuthForm"],"sourceRoot":""}